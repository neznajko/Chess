//////////////////////////////////////////////////////////
# ifndef SQ_HPP
# define SQ_HPP
//////////////////////////////////////////////////////////
# include "io.hpp"
# include "defs.hpp"
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////[SQ]
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
# include <unordered_set>
//////////////////////////////////////////////////////////
class Unit;
class Generator;
//////////////////////////////////////////////////////////
typedef std::unordered_set<Generator*> subscribers_t;
//////////////////////////////////////////////////////////
class SQ {
    const offset_t offset;
    Unit*          unit;
    subscribers_t  subscribers;
    //////////////////////////////////////////////////////
    void Notify() const;
public:
    SQ( const offset_t offset, Unit* unit ):
        offset( offset ),
        unit( unit )
		{}
    //////////////////////////////////////////////////////
    friend ostream&
    operator<<( ostream& os, const SQ& sq );
    //////////////////////////////////////////////////////
    const Unit* GetUnit() const { return unit; }
    //////////////////////////////////////////////////////
    Unit* SetUnit( Unit* const nextUnit );
    //////////////////////////////////////////////////////
    void Register( Generator* const observer ){
        subscribers.insert( observer );
    }
    //////////////////////////////////////////////////////
    void Unregister( Generator* const observer ){
        subscribers.erase( observer );
    }
	///////////////// looks for any same color subscribers
    bool Check( const color_t color ) const;
    //////////////////////////////////////////////////////
};
//////////////////////////////////////////////////////////
# endif
//////////////////////////////////////////////////////////
